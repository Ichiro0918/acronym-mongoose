{"version":3,"sources":["../src/app.ts"],"sourcesContent":["import compression from 'compression';\nimport cookieParser from 'cookie-parser';\nimport cors from 'cors';\nimport express from 'express';\nimport helmet from 'helmet';\nimport hpp from 'hpp';\nimport morgan from 'morgan';\nimport { connect, set } from 'mongoose';\nimport swaggerJSDoc from 'swagger-jsdoc';\nimport swaggerUi from 'swagger-ui-express';\nimport { NODE_ENV, PORT, LOG_FORMAT, ORIGIN, CREDENTIALS } from '@config';\nimport { dbConnection } from 'databases';\nimport { Routes } from '@interfaces/routes.interface';\nimport errorMiddleware from '@middlewares/error.middleware';\nimport { logger, stream } from '@utils/logger';\nconst swaggerJSON = require('../swagger.json');\n\nclass App {\n  public app: express.Application;\n  public env: string;\n  public port: string | number;\n\n  constructor(routes: Routes[]) {\n    this.app = express();\n    this.env = NODE_ENV || 'development';\n    this.port = PORT || 3000;\n\n    this.connectToDatabase();\n    this.initializeMiddlewares();\n    this.initializeRoutes(routes);\n    this.initializeSwagger();\n    this.initializeErrorHandling();\n  }\n\n  public listen() {\n    this.app.listen(this.port, () => {\n      logger.info(`=================================`);\n      logger.info(`======= ENV: ${this.env} =======`);\n      logger.info(`ðŸš€ App listening on the port ${this.port}`);\n      logger.info(`=================================`);\n    });\n  }\n\n  public getServer() {\n    return this.app;\n  }\n\n  private connectToDatabase() {\n    if (this.env !== 'production') {\n      set('debug', true);\n    }\n\n    connect(dbConnection.url, dbConnection.options)\n      .then(() => {\n        console.log('Connected to the database ');\n      })\n      .catch(err => {\n        console.error(`Error connecting to the database. n${err}`);\n      });\n  }\n\n  private initializeMiddlewares() {\n    this.app.use(morgan(LOG_FORMAT, { stream }));\n    this.app.use(cors({ origin: ORIGIN, credentials: CREDENTIALS }));\n    this.app.use(hpp());\n    this.app.use(helmet());\n    this.app.use(compression());\n    this.app.use(express.json());\n    this.app.use(express.urlencoded({ extended: true }));\n    this.app.use(cookieParser());\n  }\n\n  private initializeRoutes(routes: Routes[]) {\n    routes.forEach(route => {\n      this.app.use('/', route.router);\n    });\n  }\n\n  private initializeSwagger() {\n    // const options = {\n    //   swaggerDefinition: {\n    //     info: {\n    //       title: 'REST API',\n    //       version: '1.0.0',\n    //       description: 'Example docs',\n    //     },\n    //   },\n    //   apis: ['swagger.yaml'],\n    // };\n\n    const options = {\n      definition: {\n        openapi: '3.0.0',\n        info: {\n          title: 'Acronym API',\n          version: '1.0.0',\n          description: 'Build a REST API for the World Texting Foundation, also known as WTF',\n        },\n\n        servers: [\n          {\n            url: 'http://localhost:3000',\n            description: 'My API Documentation',\n          },\n        ],\n      },\n      apis: ['swagger.json'],\n    };\n\n    const specs = swaggerJSDoc(options);\n    this.app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(swaggerJSON));\n  }\n\n  private initializeErrorHandling() {\n    this.app.use(errorMiddleware);\n  }\n}\n\nexport default App;\n"],"names":["swaggerJSON","require","App","listen","app","port","logger","info","env","getServer","connectToDatabase","set","connect","dbConnection","url","options","then","console","log","catch","err","error","initializeMiddlewares","use","morgan","LOG_FORMAT","stream","cors","origin","ORIGIN","credentials","CREDENTIALS","hpp","helmet","compression","express","json","urlencoded","extended","cookieParser","initializeRoutes","routes","forEach","route","router","initializeSwagger","definition","openapi","title","version","description","servers","apis","specs","swaggerJSDoc","swaggerUi","serve","setup","initializeErrorHandling","errorMiddleware","constructor","NODE_ENV","PORT"],"mappings":"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"}